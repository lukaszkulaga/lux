<?php

namespace App\Repository;


use App\Entity\DaneUzytkownikaEntity;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ManagerRegistry;

/**
 * daneUzytkownikaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DaneUzytkownikaRepository extends ServiceEntityRepository
{

    public function  __construct(ManagerRegistry $managerRegistry)
    {
        parent::__construct($managerRegistry, DaneUzytkownikaEntity::class);
    }

    public function daneUzytkownikaRepo(DaneUzytkownikaEntity $daneUzytkownika): void {

        $this->getEntityManager()->persist($daneUzytkownika);
        $this->getEntityManager()->flush();
    }

    public function pobierzDaneUzytkownikaRepo( $idUzytkownika ) {

        $daneUzytkownika = $this->findOneBy(array( 'idUzytkownika'=>$idUzytkownika ));

        return $daneUzytkownika;
    }

    public function sprawdzNazweUzytkownikaRepo( $nazwaUzytkownika ) {

        $sprawdzNazweUzytkownika = $this->findOneBy(array( 'nazwaUzytkownika'=>$nazwaUzytkownika ));

        return $sprawdzNazweUzytkownika;
    }

    public function sprawdzEmailRepo( $email ) {

        $sprawdzEmail = $this->findOneBy(array( 'email'=>$email ));

        return $sprawdzEmail;
    }

    public function edycjaDanychUzytkownikaRepo( $tablicaZDanymi, $Id ) {

        $daneUzytkownika = $this->findOneBy(array( 'idUzytkownika'=>$Id ));

        $daneUzytkownika->setEmail($tablicaZDanymi['email']);
        $daneUzytkownika->setNumerTelefonu($tablicaZDanymi['telefon']);
        $daneUzytkownika->setZdjecie($tablicaZDanymi['zdjecie']);

        $this->getEntityManager()->persist($daneUzytkownika);
        $this->getEntityManager()->flush();

        $sql ="select * from daneUzytkownika where IdUzytkownika = $Id";

        $zedytowaneDaneUzytkownika = $this->getEntityManager()->getConnection()->fetchAllAssociative($sql);

        return $zedytowaneDaneUzytkownika;
    }
}




















